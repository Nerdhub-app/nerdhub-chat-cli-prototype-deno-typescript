import type { Buffer } from "node:buffer";

/**
 * A one-time prekey that is stored in the database.
 */
export type StoredOneTimePreKey = {
  /**
   * The id of the one-time prekey
   */
  id: string;

  /**
   * Either the private key or the public key of the one-time prekey depending on
   * whether the one-time prekey is stored on the remote server or locally.
   * - Stored on remote server: Public key
   * - Stored locally: Private key
   */
  key: Buffer;
};

/**
 * One-time prekey that is generated by a factory.
 */
export type FactoryOneTimePreKey = {
  /**
   * The id of the one-time prekey
   */
  id: string;

  /**
   * The key pair of one-time prekey.
   * [0]: Private key
   * [1]: Public key
   */
  keyPair: [Buffer, Buffer];
};

/**
 * PreKey bundle that is generated by a PreKey bundle factory.
 *
 * The keys are tuples of a pair of buffers:
 * - [0]: Private key
 * - [1]: Public key
 */
export type FactoryPreKeyBundle =
  & Record<
    | "identityKey"
    | "signedPreKey",
    [Buffer, Buffer]
  >
  & { signedPreKeySignature: Buffer };

/**
 * Signed PreKey bundle generated from a PreKey factory.
 */
export type FactorySignedPreKeyBundle = {
  /**
   * Public key pair of the generated signed PreKey
   * - [0]: Private key
   * - [1]: Public key
   */
  signedPreKey: [Buffer, Buffer];

  /**
   * The signed PreKey signature
   */
  signedPreKeySignature: Buffer;
};

/**
 * Primitives for a PreKey bundle factory operations.
 */
export interface PreKeyBundleFactoryPrimitives {
  /**
   * Generates a PreKey bundle whose private keys are random Buffers.
   */
  createPreKeyBundle(): FactoryPreKeyBundle;

  /**
   * Generates a signed PreKey bundle.
   *
   * @param identityKey The private identity key used to sign the public signed prekey
   */
  createSignedPreKeyBundle(identityKey: Buffer): FactorySignedPreKeyBundle;

  /**
   * Generates `@param count` random one-time PreKeys.
   *
   * @param count The count of one-time PreKeys to generate
   */
  createManyOneTimePreKeys(count: number): FactoryOneTimePreKey[];
}

/**
 * PreKey bundle of an E2EE participant.
 * Apart from the signed prekey signature, the other key fields can altogether represent
 * either the public versions or the private versions of the keys
 * depending on whether the prekey bundle owner is the initiator of the session or the recipient.
 */
export type PreKeyBundle =
  & Record<
    | "identityKey"
    | "signedPreKey"
    | "signedPreKeySignature",
    Buffer
  >
  & { onetimePreKey?: Buffer };

/**
 * Primitives for X3DH operations for an E2EE participant.
 */
export interface X3DHPrimitives {
  /**
   * The implemented object should expose the participant's PreKey bundle.
   */
  get preKeyBundle(): PreKeyBundle;

  /**
   * The E2EE participant (Initiator) derives a X3DH shared secret with another E2EE participant (Recipient)
   * using the latter's public PreKey bundle.
   *
   * @param ephemeralKey The private ephemeral key of the E2EE participant (Initiator)
   * @param recipientPreKeyBundle The public PreKey bundle of the recipient
   */
  deriveKeyWithRecipient(
    ephemeralKey: Buffer,
    recipientPreKeyBundle: PreKeyBundle,
  ): Buffer;

  /**
   * The E2EE participant (Recipient) derives a X3DH shared secret with another E2EE participant (Initiator)
   * using the latter's public identity key and public ephemeral key.
   *
   * @param identityKey The public identity key of the initiator
   * @param ephemeralKey The public ephemeral key of the initiator
   */
  deriveKeyWithInitiator(identityKey: Buffer, ephemeralKey: Buffer): Buffer;
}

/**
 * Primitives for the operations related to XEdDSA
 */
export interface XEdDSAPrimitives {
  /**
   * Signs a message using the xEdDSA specification
   *
   * @param message The message to sign
   * @param x25519PrivateKey The raw x25519 private key
   * @return The signature
   */
  sign(message: Buffer, x25519PrivateKey: Buffer): Buffer;

  /**
   * Verifies a XEdDSA signature against the message and a x25519 public key
   *
   * @param signature The signature
   * @param message The message that was signed
   * @param x25519PublicKey The raw x25519 public key
   */
  verify(
    signature: Buffer,
    message: Buffer,
    x25519PublicKey: Buffer,
  ): boolean;
}
